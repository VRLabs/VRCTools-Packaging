name: CI

on:
  push:
    branches:
      - 'release/*'

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Set version from branch name
        id: set_version
        run: |
          version=$(echo "${{ github.ref }}" | sed 's/refs\/heads\/release\///')
          echo "version=$version" >> $GITHUB_OUTPUT
          
      - name: Set project version
        run: |
          sed -i "s/<Version>.*<\/Version>/<Version>${{ steps.set_version.outputs.version }}<\/Version>/" VRLabs.VRCTools.Packaging/VRLabs.VRCTools.Packaging.csproj
          sed -i "s/<Version>.*<\/Version>/<Version>${{ steps.set_version.outputs.version }}<\/Version>/" VRLabs.VRCTools.Packaging.Console/VRLabs.VRCTools.Packaging.Console.csproj

      - name: Configure git
        run: |
          git config --global user.email "github-action@users.noreply.github.com"
          git config --global user.name "GitHub Action"
          git config --global user.password '${{ secrets.GITHUB_TOKEN }}'

      - name: Commit version change
        run: |
          git add .
          git commit -m "Bump version to ${{ steps.set_version.outputs.version }}"

      - name: Apply tag to commit
        run: |
          git tag -a ${{ steps.set_version.outputs.version }} -m "Version ${{ steps.vars.set_version.version }}"
          git push --tags
          
      - name: Push changes and tag to remote repository
        run: |
          git push origin ${{ github.ref }}
          git push origin --tags
          
      - name: Set version from branch name
        id: set_version
        run: |
          version=$(echo "${{ github.ref }}" | sed 's/refs\/heads\/release\///')
          echo "github.ref=${{ steps.set_version.outputs.version }}" >> $GITHUB_OUTPUT
          
      - name: Log in to the Container registry
        uses: docker/login-action@v4
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      # This step uses [docker/metadata-action](https://github.com/docker/metadata-action#about) to extract tags and labels that will be applied to the specified image. The `id` "meta" allows the output of this step to be referenced in a subsequent step. The `images` value provides the base name for the tags and labels.
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
      # This step uses the `docker/build-push-action` action to build the image, based on your repository's `Dockerfile`. If the build succeeds, it pushes the image to GitHub Packages.
      # It uses the `context` parameter to define the build's context as the set of files located in the specified path. For more information, see "[Usage](https://github.com/docker/build-push-action#usage)" in the README of the `docker/build-push-action` repository.
      # It uses the `tags` and `labels` parameters to tag and label the image with the output from the "meta" step.
      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.set_version.outputs.version }}
          release_name: Release ${{ steps.set_version.outputs.version }}
          draft: false
          prerelease: false