name: CI

on:
  push:
    branches:
      - 'release/*'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}


jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Set version from branch name
        id: set_version
        run: |
          version=$(echo "${{ github.ref }}" | sed 's/refs\/heads\/release\///')
          version=$(echo $version | tr '[:upper:]' '[:lower:]')
          echo "version=$version" >> $GITHUB_OUTPUT
          major_version=$(echo $version | cut -d '.' -f 1)
          minor_version=$(echo $version | cut -d '.' -f 2)
          echo "major_version=$major_version" >> $GITHUB_OUTPUT
          echo "minor_version=$minor_version" >> $GITHUB_OUTPUT
          lowercase=$(echo "${{ github.repository }}" | tr '[:upper:]' '[:lower:]')
          echo "image_name=$lowercase" >> $GITHUB_OUTPUT

      - name: Set project version
        run: |
          sed -i "s/<Version>.*<\/Version>/<Version>${{ steps.set_version.outputs.version }}<\/Version>/" VRLabs.VRCTools.Packaging/VRLabs.VRCTools.Packaging.csproj
          sed -i "s/<Version>.*<\/Version>/<Version>${{ steps.set_version.outputs.version }}<\/Version>/" VRLabs.VRCTools.Packaging.Console/VRLabs.VRCTools.Packaging.Console.csproj

      - name: Configure git
        run: |
          git config --global user.email "github-action@users.noreply.github.com"
          git config --global user.name "GitHub Action"
          git config --global user.password '${{ secrets.GITHUB_TOKEN }}'

      - name: Commit version change
        run: |
          git add .
          git commit -m "Bump version to ${{ steps.set_version.outputs.version }}"

      - name: Apply tag to commit
        run: |
          git tag -a ${{ steps.set_version.outputs.version }} -m "Version ${{ steps.set_version.outputs.version }}"

      - name: Push changes and tag to remote repository
        run: |
          git push origin ${{ github.ref }}
          git push origin --tags

      - name: Modify refs with version
        run: |
          echo "GITHUB_REF=refs\/tags\/${{ steps.set_version.outputs.version }}" >> $GITHUB_OUTPUT

      - name: Log in to the Container registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      # This step uses the `docker/build-push-action` action to build the image, based on your repository's `Dockerfile`. If the build succeeds, it pushes the image to GitHub Packages.
      # It uses the `context` parameter to define the build's context as the set of files located in the specified path. For more information, see "[Usage](https://github.com/docker/build-push-action#usage)" in the README of the `docker/build-push-action` repository.
      # It uses the `tags` and `labels` parameters to tag and label the image with the output from the "meta" step.
      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./VRLabs.VRCTools.Packaging.Console/Dockerfile
          push: true
          tags: | 
            ${{ env.REGISTRY }}/${{ steps.set_version.outputs.image_name }}:${{ steps.set_version.outputs.version }}
            ${{ env.REGISTRY }}/${{ steps.set_version.outputs.image_name }}:${{ steps.set_version.outputs.major_version }}.${{ steps.set_version.outputs.minor_version }}
            ${{ env.REGISTRY }}/${{ steps.set_version.outputs.image_name }}:${{ steps.set_version.outputs.major_version }}
            ${{ env.REGISTRY }}/${{ steps.set_version.outputs.image_name }}:latest

      #- name: Create Release
      #  id: create_release
      #  uses: actions/create-release@v1
      #  env:
      #    GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #  with:
      #    tag_name: ${{ steps.set_version.outputs.version }}
      #    release_name: Release ${{ steps.set_version.outputs.version }}
      #    draft: false
      #    prerelease: false